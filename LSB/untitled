/*int j,k,m,l, step = embeddedImage->widthStep;
	uchar *data = ( uchar* )embeddedImage->imageData;
	noOfBits = 0;
	j = (header/step)*step;
	k = (header%step)*nChannels;
	m = 0;
	//cout << header << "\n";
	do {
		l = data[j+k+m];
		CvScalar s = cvGet2D(embeddedImage,5, 5);
		cout << "\t" << s.val[0] << "\t" << s.val[1] << "\t" << s.val[2] << "\n";
		noOfBits += l;
		m++;
	} while (l == 255);
	//cout << noOfBits << "\n\n";
	
	embeddedFileName = "/Users/dasaanand/IS/LSBTool/BOARD_EMBED.bmp";
	IplImage* embeddedImage1 = cvLoadImage(string2constChar(embeddedFileName), CV_LOAD_IMAGE_COLOR);
	
	CvScalar s = cvGet2D(embeddedImage1,5, 5);
	cout << "\t" << s.val[0] << "\t" << s.val[1] << "\t" << s.val[2] << "\n";
	
	cout << "-----\n";
	int i;
	for (i=0; i<embeddedImage->height; i++) {
		for (j=0; j<embeddedImage->width; j++) {
			s = cvGet2D(embeddedImage,i, j);
			cout << "\t" << s.val[0] << "\t" << s.val[1] << "\t" << s.val[2] << "\n";
			s = cvGet2D(embeddedImage1,i, j);
			cout << "\t" << s.val[0] << "\t" << s.val[1] << "\t" << s.val[2] << "\n\n";
		}
	}*/
	
	
	embeddedFileName = "/Users/dasaanand/IS/LSBTool/BOARD_EMBED.bmp";
	IplImage* embeddedImg = cvLoadImage(string2constChar(embeddedFileName), CV_LOAD_IMAGE_UNCHANGED);
	
	//CarrierEngineExtract(embeddedImg);	
	
	
	uchar *data1 = ( uchar* )coverImg->imageData; 
	uchar *data2 = ( uchar* )embeddedImg->imageData; 
	int step = coverImg->widthStep, nChannels = coverImg->nChannels;
	int i,j, r, g, b, r1, g1, b1;
	for( i = 0 ; i < coverImg->height ; i++ ) {
		for( j = 0 ; j < coverImg->width ; j++ ) {
			r = data1[i*step+j*nChannels+0];
			g = data1[i*step+j*nChannels+1];
			b = data1[i*step+j*nChannels+2];
			r1 = data2[i*step+j*nChannels+0];
			g1 = data2[i*step+j*nChannels+1];
			b1 = data2[i*step+j*nChannels+2];
			
			cout << r << "\t" << g << "\t"<< b << "\n";
			cout << r1 << "\t" << g1 << "\t"<< b1 << "\n\n";
		}
	}



CvScalar s = cvGet2D(img, 5, 5);
			cout << "\t" << s.val[0] << "\t" << s.val[1] << "\t" << s.val[2] << "\n";
			s.val[0] = noOfBitsEmbedded;
			
			//cvSet2D(img, 5, 5, s);
			
			s = cvGet2D(img,5, 5);
			cout << "\t" << s.val[0] << "\t" << s.val[1] << "\t" << s.val[2] << "\n";
			
			